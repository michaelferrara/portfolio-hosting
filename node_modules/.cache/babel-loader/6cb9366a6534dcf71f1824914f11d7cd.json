{"ast":null,"code":"//import React from 'react';\nimport { csv } from 'd3';\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\nlet ProjArr = [];\nexport const projectPromise = (resolve, reject) => {\n  const row = d => {\n    let data = JSON.parse(JSON.stringify(slideData));\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n    let picStr = d.pictures;\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 200;\n    let linkStr = d.relatedLinks; // Doesn't allow for duplicate project names\n\n    for (let i = 0; i < ProjArr.length; i++) {\n      if (ProjArr[i].name === data.name) return;\n    } // Converts description to shortened version ending in ...\n\n\n    for (let i = 0; i < longDesc.length; i++) {\n      if (i >= maxLen) {\n        if (/\\s/.test(longDesc.charAt(i))) {\n          shortDesc += \"...\"; //console.log(shortDesc);\n\n          break;\n        } else {\n          shortDesc += longDesc.charAt(i);\n        }\n      } else {\n        shortDesc += longDesc.charAt(i);\n      }\n    } // Converts picture names from string to array\n\n\n    let picArr = picStr.split(',');\n\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    } // Converts tech from string to array\n\n\n    let techArr = techStr.split(',');\n\n    for (let i = 0; i < techArr.length; i++) {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc; // Converts related links from string to array\n\n    let linkArr = linkStr.split(',');\n\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({\n        name: str[0],\n        link: str[1]\n      });\n    } //console.log(data);\n\n\n    ProjArr.push(data); //setKeyNum(ProjArr.length);\n  };\n\n  csv('data.csv', row).then(data => {\n    //console.log(ProjArr);\n    console.log(ProjArr);\n    resolve(ProjArr);\n    return;\n  });\n};\nconst projProm = new Promise(projectPromise);\nprojProm.then((success, failed) => {\n  ProjArr = success;\n});\nexport const getProjects = () => {\n  return ProjArr;\n};","map":{"version":3,"sources":["/Users/mi883877/Documents/Techrangers/Repos/portfolio-project/src/components/DataHolder.js"],"names":["csv","slideData","name","description","shortDescription","myRole","pictures","techUsed","relatedLinks","ProjArr","projectPromise","resolve","reject","row","d","data","JSON","parse","stringify","projectName","picStr","techStr","longDesc","shortDesc","maxLen","linkStr","i","length","test","charAt","picArr","split","push","techArr","linkArr","str","link","then","console","log","projProm","Promise","success","failed","getProjects"],"mappings":"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","sourcesContent":["//import React from 'react';\nimport { csv } from 'd3';\n\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\n\nlet ProjArr = [];\n\nexport const projectPromise = (resolve, reject) => {\n\n  const row = (d) => {\n    let data = JSON.parse(JSON.stringify(slideData));\n\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n\n    let picStr = d.pictures\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 200;\n    let linkStr = d.relatedLinks;\n\n    // Doesn't allow for duplicate project names\n    for (let i = 0; i < ProjArr.length; i++)\n    {\n      if (ProjArr[i].name === data.name)\n        return;\n    }\n\n    // Converts description to shortened version ending in ...\n    for (let i = 0; i < longDesc.length; i++)\n    {\n      if (i >= maxLen)\n      {\n        if (/\\s/.test(longDesc.charAt(i)))\n        {\n          shortDesc += \"...\";\n          //console.log(shortDesc);\n          break;\n        }\n        else\n        {\n          shortDesc += longDesc.charAt(i);\n        }\n      }\n      else\n      {\n        shortDesc += longDesc.charAt(i);\n      }\n    }\n\n    // Converts picture names from string to array\n    let picArr = picStr.split(',');\n    for (let i = 0; i < picArr.length; i++)\n    {\n      data.pictures.push(picArr[i]);\n    }\n\n    // Converts tech from string to array\n    let techArr = techStr.split(',');\n    for (let i = 0; i < techArr.length; i++)\n    {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc;\n\n    // Converts related links from string to array\n    let linkArr = linkStr.split(',');\n    for (let i = 0; i < linkArr.length; i++)\n    {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({name: str[0], link: str[1]});\n    }\n\n    //console.log(data);\n\n    ProjArr.push(data);\n\n    //setKeyNum(ProjArr.length);\n  }\n\n  csv('data.csv', row).then( data => {\n    //console.log(ProjArr);\n    console.log(ProjArr);\n    resolve(ProjArr);\n    return;\n  });\n}\n\nconst projProm = new Promise(projectPromise);\nprojProm.then((success,failed) => {\n  ProjArr = success;\n})\n\nexport const getProjects = () => {\n  return ProjArr;\n}\n"]},"metadata":{},"sourceType":"module"}