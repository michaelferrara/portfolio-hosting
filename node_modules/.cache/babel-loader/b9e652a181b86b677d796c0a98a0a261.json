{"ast":null,"code":"//import React from 'react';\nimport { csv } from 'd3';\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\nconst personalData = {\n  bio: \"\",\n  techKnown: [],\n  techLearning: [],\n  pictures: [],\n  relatedLinks: []\n};\nlet ProjArr = [];\nlet projProm = null;\nlet personalProm = null;\nlet PersonalObj = null;\n\nconst projectPromise = (resolve, reject) => {\n  alert(\"TWO DONE\");\n\n  const row = d => {\n    let data = JSON.parse(JSON.stringify(slideData));\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n    let picStr = d.pictures;\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 350;\n    let linkStr = d.relatedLinks; // Doesn't allow for duplicate project names\n\n    for (let i = 0; i < ProjArr.length; i++) {\n      if (ProjArr[i].name === data.name) {\n        return;\n      }\n    } // Converts description to shortened version ending in ...\n\n\n    for (let i = 0; i < longDesc.length; i++) {\n      if (i >= maxLen) {\n        if (/\\s/.test(longDesc.charAt(i))) {\n          shortDesc += \"...\"; //console.log(shortDesc);\n\n          break;\n        } else {\n          shortDesc += longDesc.charAt(i);\n        }\n      } else {\n        shortDesc += longDesc.charAt(i);\n      }\n    } // Converts picture names from string to array\n\n\n    let picArr = picStr.split(',');\n\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    } // Converts tech from string to array\n\n\n    let techArr = techStr.split(',');\n\n    for (let i = 0; i < techArr.length; i++) {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc; // Converts related links from string to array\n\n    let linkArr = linkStr.split(',');\n\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({\n        name: str[0],\n        link: str[1]\n      });\n    } //console.log(data);\n\n\n    ProjArr.push(data); //setKeyNum(ProjArr.length);\n  };\n\n  csv('data.csv', row).then(data => {\n    //console.log(ProjArr);\n    //console.log(ProjArr);\n    resolve(ProjArr);\n    return;\n  });\n}; // Bio, techknown, techlearning, pictures, relLinks\n\n\nconst personalPromise = (resolve, reject) => {\n  alert(\"ONE DONE\");\n\n  const row = d => {\n    let data = JSON.parse(JSON.stringify(personalData));\n    data.bio = d.bio;\n    /*\n        techKnown: [],\n        techLearning: [],\n        pictures: [],\n        relatedLinks: []\n    */\n\n    let picStr = d.pictures;\n    let techKnowStr = d.techKnown;\n    let techLearnStr = d.techLearning;\n    let linkStr = d.relatedLinks; // Converts picture names from string to array\n\n    let picArr = picStr.split(',');\n\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    } // Converts tech from string to array\n\n\n    let techKnowArr = techKnowStr.split(',');\n\n    for (let i = 0; i < techKnowArr.length; i++) {\n      data.techKnown.push(techKnowArr[i]);\n    }\n\n    let techLearningArr = techLearnStr.split(',');\n\n    for (let i = 0; i < techLearningArr.length; i++) {\n      data.techLearning.push(techLearningArr[i]);\n    } // Converts related links from string to array\n\n\n    let linkArr = linkStr.split(',');\n\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({\n        name: str[0],\n        link: str[1]\n      });\n    } //console.log(data);\n\n\n    PersonalObj = data;\n  };\n\n  csv('personalData.csv', row).then(data => {\n    //console.log(ProjArr);\n    //console.log(PersonalObj);\n    resolve(PersonalObj);\n    return;\n  });\n};\n\nif (projProm === null) {\n  projProm = new Promise(projectPromise);\n  projProm.then((success, failed) => {\n    ProjArr = success;\n  });\n}\n\nif (personalProm === null) {\n  personalProm = new Promise(personalPromise);\n  personalProm.then((success, failed) => {\n    PersonalObj = success;\n  });\n}\n\nexport const getProjects = () => {\n  if (ProjArr === []) return projProm;\n  return ProjArr;\n};\nexport const getPersonal = () => {\n  if (PersonalObj === null) return personalProm;\n  return PersonalObj;\n};","map":{"version":3,"sources":["/Users/mi883877/Documents/Techrangers/Repos/portfolio-hosting/src/components/DataHolder.js"],"names":["csv","slideData","name","description","shortDescription","myRole","pictures","techUsed","relatedLinks","personalData","bio","techKnown","techLearning","ProjArr","projProm","personalProm","PersonalObj","projectPromise","resolve","reject","alert","row","d","data","JSON","parse","stringify","projectName","picStr","techStr","longDesc","shortDesc","maxLen","linkStr","i","length","test","charAt","picArr","split","push","techArr","linkArr","str","link","then","personalPromise","techKnowStr","techLearnStr","techKnowArr","techLearningArr","Promise","success","failed","getProjects","getPersonal"],"mappings":"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","sourcesContent":["//import React from 'react';\nimport { csv } from 'd3';\n\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\n\nconst personalData = {\n  bio: \"\",\n  techKnown: [],\n  techLearning: [],\n  pictures: [],\n  relatedLinks: []\n};\n\nlet ProjArr = [];\nlet projProm = null;\nlet personalProm = null;\nlet PersonalObj = null;\n\nconst projectPromise = (resolve, reject) => {\n\n  alert(\"TWO DONE\");\n\n  const row = (d) => {\n    let data = JSON.parse(JSON.stringify(slideData));\n\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n\n    let picStr = d.pictures\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 350;\n    let linkStr = d.relatedLinks;\n\n    // Doesn't allow for duplicate project names\n    for (let i = 0; i < ProjArr.length; i++) {\n      if (ProjArr[i].name === data.name) {\n        return;\n      }\n    }\n\n    // Converts description to shortened version ending in ...\n    for (let i = 0; i < longDesc.length; i++) {\n      if (i >= maxLen) {\n        if (/\\s/.test(longDesc.charAt(i))) {\n          shortDesc += \"...\";\n          //console.log(shortDesc);\n          break;\n        } else {\n          shortDesc += longDesc.charAt(i);\n        }\n      } else {\n        shortDesc += longDesc.charAt(i);\n      }\n    }\n\n    // Converts picture names from string to array\n    let picArr = picStr.split(',');\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    }\n\n    // Converts tech from string to array\n    let techArr = techStr.split(',');\n    for (let i = 0; i < techArr.length; i++) {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc;\n\n    // Converts related links from string to array\n    let linkArr = linkStr.split(',');\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({name: str[0], link: str[1]});\n    }\n\n    //console.log(data);\n\n    ProjArr.push(data);\n\n    //setKeyNum(ProjArr.length);\n  }\n\n  csv('data.csv', row).then( data => {\n    //console.log(ProjArr);\n    //console.log(ProjArr);\n    resolve(ProjArr);\n    return;\n  });\n}\n\n// Bio, techknown, techlearning, pictures, relLinks\nconst personalPromise = (resolve, reject) => {\n\n  alert(\"ONE DONE\");\n\n  const row = (d) => {\n    let data = JSON.parse(JSON.stringify(personalData));\n\n    data.bio = d.bio;\n/*\n    techKnown: [],\n    techLearning: [],\n    pictures: [],\n    relatedLinks: []\n*/\n    let picStr = d.pictures\n    let techKnowStr = d.techKnown;\n    let techLearnStr = d.techLearning;\n    let linkStr = d.relatedLinks;\n\n    // Converts picture names from string to array\n    let picArr = picStr.split(',');\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    }\n\n    // Converts tech from string to array\n    let techKnowArr = techKnowStr.split(',');\n    for (let i = 0; i < techKnowArr.length; i++) {\n      data.techKnown.push(techKnowArr[i]);\n    }\n\n    let techLearningArr = techLearnStr.split(',');\n    for (let i = 0; i < techLearningArr.length; i++) {\n      data.techLearning.push(techLearningArr[i]);\n    }\n\n    // Converts related links from string to array\n    let linkArr = linkStr.split(',');\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({name: str[0], link: str[1]});\n    }\n\n    //console.log(data);\n\n    PersonalObj = data;\n  }\n\n  csv('personalData.csv', row).then( data => {\n    //console.log(ProjArr);\n    //console.log(PersonalObj);\n    resolve(PersonalObj);\n    return;\n  });\n}\n\nif (projProm === null)\n{\n  projProm = new Promise(projectPromise);\n  projProm.then((success,failed) => {\n    ProjArr = success;\n  })\n}\n\nif (personalProm === null)\n{\n  personalProm = new Promise(personalPromise);\n  personalProm.then((success,failed) => {\n    PersonalObj = success;\n  })\n}\n\nexport const getProjects = () => {\n  if (ProjArr === [])\n    return projProm;\n\n  return ProjArr;\n}\n\nexport const getPersonal = () => {\n  if (PersonalObj === null)\n    return personalProm;\n\n  return PersonalObj;\n}\n"]},"metadata":{},"sourceType":"module"}