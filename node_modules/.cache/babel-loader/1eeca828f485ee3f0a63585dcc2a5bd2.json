{"ast":null,"code":"//import React from 'react';\nimport { csv } from 'd3';\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\nconst personalData = {\n  bio: \"\",\n  techKnown: [],\n  techLearning: [],\n  pictures: [],\n  relatedLinks: []\n};\nlet ProjArr = [];\nlet PersonalObj = null;\nexport const projectPromise = (resolve, reject) => {\n  const row = d => {\n    let data = JSON.parse(JSON.stringify(slideData));\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n    let picStr = d.pictures;\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 200;\n    let linkStr = d.relatedLinks; // Doesn't allow for duplicate project names\n\n    for (let i = 0; i < ProjArr.length; i++) {\n      if (ProjArr[i].name === data.name) return;\n    } // Converts description to shortened version ending in ...\n\n\n    for (let i = 0; i < longDesc.length; i++) {\n      if (i >= maxLen) {\n        if (/\\s/.test(longDesc.charAt(i))) {\n          shortDesc += \"...\"; //console.log(shortDesc);\n\n          break;\n        } else {\n          shortDesc += longDesc.charAt(i);\n        }\n      } else {\n        shortDesc += longDesc.charAt(i);\n      }\n    } // Converts picture names from string to array\n\n\n    let picArr = picStr.split(',');\n\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    } // Converts tech from string to array\n\n\n    let techArr = techStr.split(',');\n\n    for (let i = 0; i < techArr.length; i++) {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc; // Converts related links from string to array\n\n    let linkArr = linkStr.split(',');\n\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({\n        name: str[0],\n        link: str[1]\n      });\n    } //console.log(data);\n\n\n    ProjArr.push(data); //setKeyNum(ProjArr.length);\n  };\n\n  csv('data.csv', row).then(data => {\n    //console.log(ProjArr);\n    console.log(ProjArr);\n    resolve(ProjArr);\n    return;\n  });\n}; // Bio, techknown, techlearning, pictures, relLinks\n\nexport const personalPromise = (resolve, reject) => {\n  const row = d => {\n    let data = JSON.parse(JSON.stringify(personalData));\n    data.bio = d.bio;\n    /*\n        techKnown: [],\n        techLearning: [],\n        pictures: [],\n        relatedLinks: []\n    */\n\n    let picStr = d.pictures;\n    let techKnowStr = d.techKnown;\n    let techLearnStr = d.techLearning;\n    let linkStr = d.relatedLinks; // Converts picture names from string to array\n\n    let picArr = picStr.split(',');\n\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    } // Converts tech from string to array\n\n\n    let techKnowArr = techKnowStr.split(',');\n\n    for (let i = 0; i < techKnowArr.length; i++) {\n      data.techKnown.push(techKnowArr[i]);\n    }\n\n    let techLearningArr = techLearnStr.split(',');\n\n    for (let i = 0; i < techLearningArr.length; i++) {\n      data.techLearning.push(techLearningArr[i]);\n    } // Converts related links from string to array\n\n\n    let linkArr = linkStr.split(',');\n\n    for (let i = 0; i < linkArr.length; i++) {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({\n        name: str[0],\n        link: str[1]\n      });\n    }\n\n    console.log(data);\n    PersonalObj = data;\n  };\n\n  csv('personalData.csv', row).then(data => {\n    //console.log(ProjArr);\n    console.log(PersonalObj);\n    resolve(PersonalObj);\n    return;\n  });\n};\nconst projProm = new Promise(projectPromise);\nprojProm.then((success, failed) => {\n  ProjArr = success;\n});\nconst personalProm = new Promise(personalPromise);\npersonalProm.then((success, failed) => {\n  PersonalObj = success;\n});\nexport const getProjects = () => {\n  return ProjArr;\n};\nexport const getPersonal = () => {\n  return PersonalObj;\n};","map":{"version":3,"sources":["/Users/mi883877/Documents/Techrangers/Repos/portfolio-project/src/components/DataHolder.js"],"names":["csv","slideData","name","description","shortDescription","myRole","pictures","techUsed","relatedLinks","personalData","bio","techKnown","techLearning","ProjArr","PersonalObj","projectPromise","resolve","reject","row","d","data","JSON","parse","stringify","projectName","picStr","techStr","longDesc","shortDesc","maxLen","linkStr","i","length","test","charAt","picArr","split","push","techArr","linkArr","str","link","then","console","log","personalPromise","techKnowStr","techLearnStr","techKnowArr","techLearningArr","projProm","Promise","success","failed","personalProm","getProjects","getPersonal"],"mappings":"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","sourcesContent":["//import React from 'react';\nimport { csv } from 'd3';\n\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\n\nconst personalData = {\n  bio: \"\",\n  techKnown: [],\n  techLearning: [],\n  pictures: [],\n  relatedLinks: []\n};\n\nlet ProjArr = [];\nlet PersonalObj = null;\n\nexport const projectPromise = (resolve, reject) => {\n\n  const row = (d) => {\n    let data = JSON.parse(JSON.stringify(slideData));\n\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n\n    let picStr = d.pictures\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 200;\n    let linkStr = d.relatedLinks;\n\n    // Doesn't allow for duplicate project names\n    for (let i = 0; i < ProjArr.length; i++)\n    {\n      if (ProjArr[i].name === data.name)\n        return;\n    }\n\n    // Converts description to shortened version ending in ...\n    for (let i = 0; i < longDesc.length; i++)\n    {\n      if (i >= maxLen)\n      {\n        if (/\\s/.test(longDesc.charAt(i)))\n        {\n          shortDesc += \"...\";\n          //console.log(shortDesc);\n          break;\n        }\n        else\n        {\n          shortDesc += longDesc.charAt(i);\n        }\n      }\n      else\n      {\n        shortDesc += longDesc.charAt(i);\n      }\n    }\n\n    // Converts picture names from string to array\n    let picArr = picStr.split(',');\n    for (let i = 0; i < picArr.length; i++)\n    {\n      data.pictures.push(picArr[i]);\n    }\n\n    // Converts tech from string to array\n    let techArr = techStr.split(',');\n    for (let i = 0; i < techArr.length; i++)\n    {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc;\n\n    // Converts related links from string to array\n    let linkArr = linkStr.split(',');\n    for (let i = 0; i < linkArr.length; i++)\n    {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({name: str[0], link: str[1]});\n    }\n\n    //console.log(data);\n\n    ProjArr.push(data);\n\n    //setKeyNum(ProjArr.length);\n  }\n\n  csv('data.csv', row).then( data => {\n    //console.log(ProjArr);\n    console.log(ProjArr);\n    resolve(ProjArr);\n    return;\n  });\n}\n\n// Bio, techknown, techlearning, pictures, relLinks\nexport const personalPromise = (resolve, reject) => {\n\n  const row = (d) => {\n    let data = JSON.parse(JSON.stringify(personalData));\n\n    data.bio = d.bio;\n/*\n    techKnown: [],\n    techLearning: [],\n    pictures: [],\n    relatedLinks: []\n*/\n    let picStr = d.pictures\n    let techKnowStr = d.techKnown;\n    let techLearnStr = d.techLearning;\n    let linkStr = d.relatedLinks;\n\n    // Converts picture names from string to array\n    let picArr = picStr.split(',');\n    for (let i = 0; i < picArr.length; i++)\n    {\n      data.pictures.push(picArr[i]);\n    }\n\n    // Converts tech from string to array\n    let techKnowArr = techKnowStr.split(',');\n    for (let i = 0; i < techKnowArr.length; i++)\n    {\n      data.techKnown.push(techKnowArr[i]);\n    }\n\n    let techLearningArr = techLearnStr.split(',');\n    for (let i = 0; i < techLearningArr.length; i++)\n    {\n      data.techLearning.push(techLearningArr[i]);\n    }\n\n    // Converts related links from string to array\n    let linkArr = linkStr.split(',');\n    for (let i = 0; i < linkArr.length; i++)\n    {\n      let str = linkArr[i].split('>');\n      data.relatedLinks.push({name: str[0], link: str[1]});\n    }\n\n    console.log(data);\n\n    PersonalObj = data;\n  }\n\n  csv('personalData.csv', row).then( data => {\n    //console.log(ProjArr);\n    console.log(PersonalObj);\n    resolve(PersonalObj);\n    return;\n  });\n}\n\nconst projProm = new Promise(projectPromise);\nprojProm.then((success,failed) => {\n  ProjArr = success;\n})\n\nconst personalProm = new Promise(personalPromise);\npersonalProm.then((success,failed) => {\n  PersonalObj = success;\n})\n\nexport const getProjects = () => {\n  return ProjArr;\n}\n\nexport const getPersonal = () => {\n  return PersonalObj;\n}\n"]},"metadata":{},"sourceType":"module"}