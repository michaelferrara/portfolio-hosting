{"ast":null,"code":"//import React from 'react';\nimport { csv } from 'd3';\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\nlet valArr = [];\nexport const projectPromise = (resolve, reject) => {\n  const row = d => {\n    let data = JSON.parse(JSON.stringify(slideData));\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n    let picStr = d.pictures;\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 200; // Doesn't allow for duplicate project names\n\n    for (let i = 0; i < valArr.length; i++) {\n      if (valArr[i].name === data.name) return;\n    } // Converts description to shortened version ending in ...\n\n\n    for (let i = 0; i < longDesc.length; i++) {\n      if (i >= maxLen) {\n        if (/\\s/.test(longDesc.charAt(i))) {\n          shortDesc += \"...\"; //console.log(shortDesc);\n\n          break;\n        } else {\n          shortDesc += longDesc.charAt(i);\n        }\n      } else {\n        shortDesc += longDesc.charAt(i);\n      }\n    } // Converts picture names from string to array\n\n\n    let picArr = picStr.split(',');\n\n    for (let i = 0; i < picArr.length; i++) {\n      data.pictures.push(picArr[i]);\n    } // Converts tech from string to array\n\n\n    let techArr = techStr.split(',');\n\n    for (let i = 0; i < techArr.length; i++) {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc; //console.log(data);\n\n    valArr.push(data); //setKeyNum(valArr.length);\n  };\n\n  csv('data.csv', row).then(data => {\n    //console.log(valArr);\n    resolve(valArr);\n    return;\n  });\n};\nconst prom = new Promise(projectPromise);\nprom.then((success, failed) => {\n  valArr = success;\n});\nexport const getProjects = () => {\n  return valArr;\n};","map":{"version":3,"sources":["/Users/mi883877/Documents/Techrangers/Repos/portfolio-project/src/components/DataHolder.js"],"names":["csv","slideData","name","description","shortDescription","myRole","pictures","techUsed","relatedLinks","valArr","projectPromise","resolve","reject","row","d","data","JSON","parse","stringify","projectName","picStr","techStr","longDesc","shortDesc","maxLen","i","length","test","charAt","picArr","split","push","techArr","then","prom","Promise","success","failed","getProjects"],"mappings":"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","sourcesContent":["//import React from 'react';\nimport { csv } from 'd3';\n\nconst slideData = {\n  name: \"\",\n  description: \"\",\n  shortDescription: \"\",\n  myRole: \"\",\n  pictures: [],\n  techUsed: [],\n  relatedLinks: []\n};\n\nlet valArr = [];\n\nexport const projectPromise = (resolve, reject) => {\n\n  const row = (d) => {\n    let data = JSON.parse(JSON.stringify(slideData));\n\n    data.name = d.projectName;\n    data.description = d.description;\n    data.myRole = d.myRole;\n\n    let picStr = d.pictures\n    let techStr = d.techUsed;\n    let longDesc = d.description;\n    let shortDesc = \"\";\n    let maxLen = 200;\n\n    // Doesn't allow for duplicate project names\n    for (let i = 0; i < valArr.length; i++)\n    {\n      if (valArr[i].name === data.name)\n        return;\n    }\n\n    // Converts description to shortened version ending in ...\n    for (let i = 0; i < longDesc.length; i++)\n    {\n      if (i >= maxLen)\n      {\n        if (/\\s/.test(longDesc.charAt(i)))\n        {\n          shortDesc += \"...\";\n          //console.log(shortDesc);\n          break;\n        }\n        else\n        {\n          shortDesc += longDesc.charAt(i);\n        }\n      }\n      else\n      {\n        shortDesc += longDesc.charAt(i);\n      }\n    }\n\n    // Converts picture names from string to array\n    let picArr = picStr.split(',');\n    for (let i = 0; i < picArr.length; i++)\n    {\n      data.pictures.push(picArr[i]);\n    }\n\n    // Converts tech from string to array\n    let techArr = techStr.split(',');\n    for (let i = 0; i < techArr.length; i++)\n    {\n      data.techUsed.push(techArr[i]);\n    }\n\n    data.shortDescription = shortDesc;\n\n    //console.log(data);\n\n    valArr.push(data);\n\n    //setKeyNum(valArr.length);\n  }\n\n  csv('data.csv', row).then( data => {\n    //console.log(valArr);\n    resolve(valArr);\n    return;\n  });\n}\n\nconst prom = new Promise(projectPromise);\nprom.then((success,failed) => {\n  valArr = success;\n})\n\nexport const getProjects = () => {\n  return valArr;\n}\n"]},"metadata":{},"sourceType":"module"}